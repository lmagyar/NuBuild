<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
   <!-- NuBuild Tasks -->
   <Import Project="$(MSBuildThisFileDirectory)\NuBuild.tasks" />
   <!-- NuBuild Properties -->
   <PropertyGroup>
      <OutputPath Condition=" '$(OutputPath)'=='' ">bin\</OutputPath>
      <OutDir Condition=" '$(OutDir)' == '' ">$(OutputPath)</OutDir>
      <OutDir Condition=" '$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)') ">$(OutDir)\</OutDir>
      <!-- Property: NuBuildToolVersion
         . specifies the tool version that last edited the project properties 
      -->
      <NuBuildToolVersion Condition="'$(NuBuildToolVersion)' == ''">0.0.0</NuBuildToolVersion>
      <!-- Property: NuBuildVersionSource
         . specifies whether/how the package version string is generated
         . Manual:   manage in .nuspec file by hand
         . Library:  (default) retrieve from a library referenced by the package
         . Auto:     generate from a build number file
      -->
      <NuBuildVersionSource Condition="'$(NuBuildVersionSource)' == ''">library</NuBuildVersionSource>
      <!-- Property: NuBuildVersionFileName
         . specifies whether to include the version number in the compiled 
           package file name
      -->
      <NuBuildVersionFileName Condition="'$(NuBuildVersionFileName)' == ''">false</NuBuildVersionFileName>
      <!-- Properties: NuBuildIncludePdbs
         . specifies whether to automatically add PDB files for assemblies
           automatically added to the package
      -->
      <NuBuildIncludePdbs Condition="'$(NuBuildIncludePdbs)' == ''">false</NuBuildIncludePdbs>
      <!-- Properties: NuBuildAddBinariesToSubfolder
         . specifies whether to add binaries (.dll and .exe files) from referenced projects into subfolders
           (eg. lib\net40) based on TargetFrameworkVersion
      -->
      <NuBuildAddBinariesToSubfolder Condition="'$(NuBuildAddBinariesToSubfolder)' == ''">false</NuBuildAddBinariesToSubfolder>
      <!-- Properties: NuBuildAutoGenerateDependencies
         . specifies whether to add frameworkAssemblies and dependencies tags based on referenced projects
      -->
      <NuBuildAutoGenerateDependencies Condition="'$(NuBuildAutoGenerateDependencies)' == ''">false</NuBuildAutoGenerateDependencies>
      <!-- Properties: NuBuildLimitMajorVersionOfDependencies
         . specifies whether to add MaxVersion to dependencies
      -->
      <NuBuildLimitMajorVersionOfDependencies Condition="'$(NuBuildLimitMajorVersionOfDependencies)' == ''">false</NuBuildLimitMajorVersionOfDependencies>
      <!-- Properties: NuBuildAddExecutablesToLibFolder
         . specifies whether to add executables to lib folder instead of tools folder
       -->
      <NuBuildAddExecutablesToLibFolder Condition="'$(NuBuildAddExecutablesToLibFolder)' == ''">false</NuBuildAddExecutablesToLibFolder>
      <TargetFrameworkIdentifier Condition="'$(TargetFrameworkIdentifier)' == '' ">.NETFramework</TargetFrameworkIdentifier>
      <TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == '' ">v4.0</TargetFrameworkVersion>
      <TargetFrameworkMoniker Condition="'$(TargetFrameworkMoniker)' == '' and '$(TargetFrameworkProfile)' != '' ">$(TargetFrameworkIdentifier),Version=$(TargetFrameworkVersion),Profile=$(TargetFrameworkProfile)</TargetFrameworkMoniker>
      <TargetFrameworkMoniker Condition="'$(TargetFrameworkMoniker)' == '' ">$(TargetFrameworkIdentifier),Version=$(TargetFrameworkVersion)</TargetFrameworkMoniker>
   </PropertyGroup>
   <!-- Target: GetCopyToOutputDirectoryItems 
      . determines additional files to output directory
   -->
   <Target Name="GetCopyToOutputDirectoryItems"
           Returns="@(CopyToOutputDirectoryItems)">
      <AssignTargetPath Files="@(Content)" RootFolder="$(MSBuildProjectDirectory)">
         <Output TaskParameter="AssignedFiles" ItemName="ContentWithTargetPath" />
      </AssignTargetPath>
      <ItemGroup>
         <_SourceItemsToCopyToOutputDirectoryAlways Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
         <_SourceItemsToCopyToOutputDirectory       Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
      </ItemGroup>
      <ItemGroup>
         <CopyToOutputDirectoryItems                Include="@(_SourceItemsToCopyToOutputDirectoryAlways->'%(FullPath)');@(_SourceItemsToCopyToOutputDirectory->'%(FullPath)')"/>
      </ItemGroup>
   </Target>
   <!-- Target: PrepareOutDir
      . old project files do not include MS.Common.targets,
        MSBuild 4.5 GenerateProjectSpecificOutputFolder has to be handled here only in that case (OutDirWasSpecified=='')
        these dynamic properties can be evaluated only in a target execution, not in the property evaluation phase
   -->
   <Target Name="PrepareOutDir">
      <PropertyGroup>
         <OutDir Condition=" '$(OutDir)' != '' and '$(OutDirWasSpecified)' == '' and '$(GenerateProjectSpecificOutputFolder)' == 'true' ">$(OutDir)$(MSBuildProjectName)\</OutDir>
      </PropertyGroup>
   </Target>
   <!-- Target: PrepareBuild
      . initializes the Compile build items, adding custom metadata
      . generates the NuPrepared, NuSources and NuTargets items for incremental building
   -->
   <Target Name="PrepareBuild"
           DependsOnTargets="PrepareOutDir;GetCopyToOutputDirectoryItems">
      <AssignProjectConfiguration
         ProjectReferences="@(ProjectReference)"
         CurrentProjectConfiguration="$(Configuration)"
         CurrentProjectPlatform="$(Platform)"
         OutputType="$(OutputType)"
         ResolveConfigurationPlatformUsingMappings="false"
         SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)"
         OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration = "$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)"
         ShouldUnsetParentConfigurationAndPlatform = "false" >
         <Output TaskParameter="AssignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
      </AssignProjectConfiguration>
      <MSBuild
         Projects="@(ProjectReferenceWithConfiguration)"
         Properties="%(ProjectReferenceWithConfiguration.SetConfiguration); %(ProjectReferenceWithConfiguration.SetPlatform)"
         Targets="GetTargetPath">
         <Output TaskParameter="TargetOutputs" ItemName="ReferenceLibrariesWithConfiguration" />
      </MSBuild>
      <NuPrepareBuild
         ProjectPath="$(MSBuildProjectFullPath)"
         NuSpec="@(Compile)"
         Embedded="@(EmbeddedResource)"
         VersionSource="$(NuBuildVersionSource)"
         VersionFileName="$(NuBuildVersionFileName)"
         OutputPath="$(OutDir)"
         BuildNumber="$(BuildNumber)"
         ReferenceLibraries="@(ReferenceLibrariesWithConfiguration)">
         <Output TaskParameter="Prepared" ItemName="NuPrepared"/>
         <Output TaskParameter="Sources" ItemName="NuSources"/>
         <Output TaskParameter="Targets" ItemName="NuTargets"/>
      </NuPrepareBuild>
      <ItemGroup>
         <NuSources Include="$(MSBuildProjectFile);"/>
      </ItemGroup>
      <Message Text="NuPrepared: @(NuPrepared)"/>
      <Message Text="NuSources:  @(NuSources)"/>
      <Message Text="NuTargets:  @(NuTargets)"/>
   </Target>
   <!-- Target: PrepareClean
      . generates the NuTargets items for the clean, based on the .nupkgs file
   -->
   <Target Name="PrepareClean"
           DependsOnTargets="PrepareOutDir;GetCopyToOutputDirectoryItems">
      <NuPrepareClean
         ProjectPath="$(MSBuildProjectFullPath)"
         OutputPath="$(OutDir)">
         <Output TaskParameter="Targets" ItemName="NuTargets"/>
      </NuPrepareClean>
      <ItemGroup>
         <NuTargets Include="@(CopyToOutputDirectoryItems->'$(OutDir)%(TargetPath)');"/>
      </ItemGroup>
      <Message Text="NuTargets: @(NuTargets)"/>
   </Target>
   <!-- Target: Clean 
      . removes all .nupkg files from the output path
   -->
   <Target Name="Clean" DependsOnTargets="PrepareClean;BeforeClean;CoreClean;AfterClean">
   </Target>
   <Target Name="CoreClean">
      <Delete Files="@(NuTargets)"/>
   </Target>
   <!-- Target: Build 
      . creates a .nupkg file for each .nuspec file in the project
   -->
   <Target Name="Build"
           DependsOnTargets="PrepareBuild;BeforeBuild;CoreBuild;AfterBuild" >
   </Target>
   <Target Name="CoreBuild"
           DependsOnTargets="PreBuildEvent;NuPackage;CopySourceItemsToOutputDirectory;PostBuildEvent" >
      <OnError ExecuteTargets="PostBuildEvent" Condition="'$(RunPostBuildEvent)'=='Always' or '$(RunPostBuildEvent)'=='OnOutputUpdated'"/>
   </Target>
   <Target Name="PreBuildEvent"
           Condition="'$(PreBuildEvent)'!=''" >
      <Exec WorkingDirectory="$(OutDir)" Command="$(PreBuildEvent)" />
   </Target>
   <Target Name="NuPackage"
           Inputs="@(NuSources)"
           Outputs="@(NuTargets)">
      <!-- MSBuild (even 12.0) on TFS can't determine the project build order from ProjectReference items,
           we have to build them manually -->
      <MSBuild
         Condition=" '$(BuildingInsideVisualStudio)' != 'true' "
         Projects="@(ProjectReferenceWithConfiguration)"
         Properties="%(ProjectReferenceWithConfiguration.SetConfiguration); %(ProjectReferenceWithConfiguration.SetPlatform)"
         Targets="Build"
         BuildInParallel="$(BuildInParallel)">
      </MSBuild>
      <NuPackage
         ProjectPath="$(MSBuildProjectFullPath)"
         TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
         NuSpec="@(NuPrepared)"
         Embedded="@(EmbeddedResource)"
         OutputPath="$(OutDir)"
         ReferenceProjects="@(ProjectReferenceWithConfiguration)"
         ReferenceLibraries="@(ReferenceLibrariesWithConfiguration)"
         ToolVersion="$(NuBuildToolVersion)"
         AddBinariesToSubfolder="$(NuBuildAddBinariesToSubfolder)"
         AutoGenerateDependencies="$(NuBuildAutoGenerateDependencies)"
         LimitMajorVersionOfDependencies="$(NuBuildLimitMajorVersionOfDependencies)"
         AddExecutablesToLibFolder="$(NuBuildAddExecutablesToLibFolder)"
         IncludePdbs="$(NuBuildIncludePdbs)"/>
      <Message Text="%(NuPrepared.Filename) -> %(NuPrepared.NuPackagePath)" Importance="high"/>
   </Target>
   <Target Name="PostBuildEvent"
           Condition="'$(PostBuildEvent)' != '' and '$(RunPostBuildEvent)' != 'OnOutputUpdated'" >
      <Exec WorkingDirectory="$(OutDir)" Command="$(PostBuildEvent)" />
   </Target>
   <!-- Target: Rebuild 
      . runs a clean and then a build
   -->
   <Target Name="Rebuild" DependsOnTargets="Clean;Build;">
   </Target>
   <!-- Target: CopySourceItemsToOutputDirectory 
      . copies additional files to output directory
   -->
   <Target Name="CopySourceItemsToOutputDirectory"
           DependsOnTargets="GetCopyToOutputDirectoryItems;_CopyOutOfDateSourceItemsToOutputDirectory;_CopyOutOfDateSourceItemsToOutputDirectoryAlways"/>
   <Target Name="_CopyOutOfDateSourceItemsToOutputDirectory"
           Condition=" '@(_SourceItemsToCopyToOutputDirectory)' != '' "
           Inputs="@(_SourceItemsToCopyToOutputDirectory)"
           Outputs="@(_SourceItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')">
      <Copy SourceFiles = "@(_SourceItemsToCopyToOutputDirectory)"
            DestinationFiles = "@(_SourceItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')"
            OverwriteReadOnlyFiles="true"/>
   </Target>
   <Target Name="_CopyOutOfDateSourceItemsToOutputDirectoryAlways"
           Condition=" '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' ">
      <Copy SourceFiles = "@(_SourceItemsToCopyToOutputDirectoryAlways)"
            DestinationFiles = "@(_SourceItemsToCopyToOutputDirectoryAlways->'$(OutDir)%(TargetPath)')"
            OverwriteReadOnlyFiles="true"/>
   </Target>
   <!-- Dummy targets required for Visual Studio -->
   <Target Name="GetFrameworkPaths"/>
   <Target Name="ResolveAssemblyReferences"/>
   <!-- User Targets -->
   <Target Name="BeforeClean"/>
   <Target Name="AfterClean"/>
   <Target Name="BeforeBuild"/>
   <Target Name="AfterBuild"/>
</Project>
