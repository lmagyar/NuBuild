<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
   <!-- NuBuild Tasks -->
   <Import Project="$(MSBuildThisFileDirectory)\NuBuild.tasks" />
   <!-- NuBuild Properties -->
   <PropertyGroup>
      <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)'=='' ">obj\</BaseIntermediateOutputPath>
      <OutputPath Condition=" '$(OutputPath)'=='' ">bin\</OutputPath>
      <OutDir Condition=" '$(OutDir)' == '' ">$(OutputPath)</OutDir>
      <OutDir Condition=" '$(OutDir)' != '' AND !HasTrailingSlash('$(OutDir)') ">$(OutDir)\</OutDir>
      <!-- old project files do not include MS.Common.targets, MSBuild 4.5 GenerateProjectSpecificOutputFolder has to be handled here only in that case (OutDirWasSpecified=='') -->
      <OutDir Condition=" '$(OutDir)' != '' AND '$(OutDirWasSpecified)' == '' AND '$(GenerateProjectSpecificOutputFolder)' == 'true' ">$(OutDir)$(MSBuildProjectName)\</OutDir>
      <!-- Property: NuBuildToolVersion
         . specifies the tool version that last edited the project properties 
      -->
      <NuBuildToolVersion Condition="'$(NuBuildToolVersion)' == ''">0.0.0</NuBuildToolVersion>
      <!-- Property: NuBuildVersionSource
         . specifies whether/how the package version string is generated
         . Manual:   manage in .nuspec file by hand
         . Library:  (default) retrieve from a library referenced by the package
         . Auto:     generate from a build number file
      -->
      <NuBuildVersionSource Condition="'$(NuBuildVersionSource)' == ''">library</NuBuildVersionSource>
      <!-- Property: NuBuildVersionFileName
         . specifies whether to include the version number in the compiled 
           package file name
      -->
      <NuBuildVersionFileName Condition="'$(NuBuildVersionFileName)' == ''">false</NuBuildVersionFileName>
      <!-- Properties: NuBuildIncludePdbs
         . specifies whether to automatically add PDB files for assemblies
           automatically added to the package
      -->
      <NuBuildIncludePdbs Condition="'$(NuBuildIncludePdbs)' == ''">false</NuBuildIncludePdbs>
      <!-- Properties: NuBuildAddBinariesToSubfolder
         . specifies whether to add binaries (.dll and .exe files) from referenced projects into subfolders
           (eg. lib\net40) based on TargetFrameworkVersion
      -->
      <NuBuildAddBinariesToSubfolder Condition="'$(NuBuildAddBinariesToSubfolder)' == ''">false</NuBuildAddBinariesToSubfolder>
      <!-- Properties: NuBuildAutoGenerateDependencies
         . specifies whether to add frameworkAssemblies and dependencies tags based on referenced projects
      -->
      <NuBuildAutoGenerateDependencies Condition="'$(NuBuildAutoGenerateDependencies)' == ''">false</NuBuildAutoGenerateDependencies>
      <!-- Properties: NuBuildLimitMajorVersionOfDependencies
         . specifies whether to add MaxVersion to dependencies
      -->
      <NuBuildLimitMajorVersionOfDependencies Condition="'$(NuBuildLimitMajorVersionOfDependencies)' == ''">false</NuBuildLimitMajorVersionOfDependencies>
      <!-- Properties: NuBuildAddExecutablesToLibFolder
         . specifies whether to add executables to lib folder instead of tools folder
       -->
      <NuBuildAddExecutablesToLibFolder Condition="'$(NuBuildAddExecutablesToLibFolder)' == ''">false</NuBuildAddExecutablesToLibFolder>
      <TargetFrameworkIdentifier Condition="'$(TargetFrameworkIdentifier)' == '' ">.NETFramework</TargetFrameworkIdentifier>
      <TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == '' ">v4.0</TargetFrameworkVersion>
      <TargetFrameworkMoniker Condition="'$(TargetFrameworkMoniker)' == '' and '$(TargetFrameworkProfile)' != '' ">$(TargetFrameworkIdentifier),Version=$(TargetFrameworkVersion),Profile=$(TargetFrameworkProfile)</TargetFrameworkMoniker>
      <TargetFrameworkMoniker Condition="'$(TargetFrameworkMoniker)' == '' ">$(TargetFrameworkIdentifier),Version=$(TargetFrameworkVersion)</TargetFrameworkMoniker>
   </PropertyGroup>
   <!-- Target: GetCopyToOutputDirectoryItems 
      . determines additional files to output directory
   -->
   <Target Name="__GetCopyToOutputDirectoryItems"
           Returns="@(CopyToOutputDirectoryItems)">
      <AssignTargetPath Files="@(Content)" RootFolder="$(MSBuildProjectDirectory)">
         <Output TaskParameter="AssignedFiles" ItemName="ContentWithTargetPath" />
      </AssignTargetPath>
      <ItemGroup>
         <_SourceItemsToCopyToOutputDirectoryAlways Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
         <_SourceItemsToCopyToOutputDirectory       Include="@(ContentWithTargetPath->'%(FullPath)')" Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
      </ItemGroup>
      <ItemGroup>
         <CopyToOutputDirectoryItems                Include="@(_SourceItemsToCopyToOutputDirectoryAlways->'%(FullPath)');@(_SourceItemsToCopyToOutputDirectory->'%(FullPath)')"/>
      </ItemGroup>
   </Target>
   <!-- Target: PrepareBuild 
      . initializes the Compile build items, adding custom metadata
      . generates the NuSources and NuTargets items for incremental building
   -->
   <Target Name="__PrepareBuild"
           DependsOnTargets="__GetCopyToOutputDirectoryItems">
      <MSBuild Projects="@(ProjectReference)" UseResultsCache="true">
         <Output TaskParameter="TargetOutputs" ItemName="__ReferenceLibraries" />
      </MSBuild>
      <NuPrepareBuild ProjectPath="$(MSBuildProjectFullPath)"
                 NuSpec="@(Compile)"
                 Embedded="@(EmbeddedResource)"
                 VersionSource="$(NuBuildVersionSource)"
                 VersionFileName="$(NuBuildVersionFileName)"
                 IntermediateOutputPath="$(BaseIntermediateOutputPath)"
                 OutputPath="$(OutDir)"
                 BuildNumber="$(BuildNumber)"
                 ReferenceLibraries="@(__ReferenceLibraries)">
         <Output TaskParameter="Prepared" ItemName="NuPrepared"/>
         <Output TaskParameter="Sources" ItemName="NuSources"/>
         <Output TaskParameter="Targets" ItemName="NuTargets"/>
      </NuPrepareBuild>
      <ItemGroup>
         <NuSources Include="$(MSBuildProjectFile);"/>
      </ItemGroup>
      <ItemGroup>
         <NuTargets Include="@(CopyToOutputDirectoryItems->'$(OutDir)%(TargetPath)');"/>
      </ItemGroup>
      <Message Text="NuSources: @(NuSources)"/>
      <Message Text="NuTargets: @(NuTargets)"/>
   </Target>
   <!-- Target: PrepareClean
      . initializes the Compile build items, adding custom metadata
      . generates the NuTargets items for the clean
   -->
   <Target Name="__PrepareClean"
           DependsOnTargets="__GetCopyToOutputDirectoryItems">
      <NuPrepareClean ProjectPath="$(MSBuildProjectFullPath)"
                      IntermediateOutputPath="$(BaseIntermediateOutputPath)">
         <Output TaskParameter="Targets" ItemName="NuTargets"/>
      </NuPrepareClean>
      <ItemGroup>
         <NuTargets Include="@(CopyToOutputDirectoryItems->'$(OutDir)%(TargetPath)');"/>
      </ItemGroup>
      <Message Text="NuTargets: @(NuTargets)"/>
   </Target>   
   <!-- Target: Clean 
      . removes all .nupkg files from the output path
   -->
   <Target Name="Clean" DependsOnTargets="__PrepareClean;BeforeClean">
      <Delete Files="@(NuTargets)"/>
      <CallTarget Targets="AfterClean"/>
   </Target>
   <!-- Target: Build 
      . creates a .nupkg file for each .nuspec file in the project
   -->
   <Target Name="Build"
           DependsOnTargets="__PrepareBuild;BeforeBuild;CoreBuild;AfterBuild" >
   </Target>
   <Target Name="CoreBuild"
           DependsOnTargets="PreBuildEvent;NuPackage;PostBuildEvent" >
      <OnError ExecuteTargets="PostBuildEvent" Condition="'$(RunPostBuildEvent)'=='Always' or '$(RunPostBuildEvent)'=='OnOutputUpdated'"/>
   </Target>
   <Target Name="PreBuildEvent"
           Condition="'$(PreBuildEvent)'!=''" >
      <Exec WorkingDirectory="$(OutDir)" Command="$(PreBuildEvent)" />
   </Target>
   <Target Name="NuPackage"
           Inputs="@(NuSources)"
           Outputs="@(NuTargets)">
      <NuPackage ProjectPath="$(MSBuildProjectFullPath)"
                 TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
                 NuSpec="@(NuPrepared)"
                 Embedded="@(EmbeddedResource)"
                 OutputPath="$(OutDir)"
                 ReferenceProjects="@(ProjectReference)"
                 ReferenceLibraries="@(__ReferenceLibraries)"
                 ToolVersion="$(NuBuildToolVersion)"
                 AddBinariesToSubfolder="$(NuBuildAddBinariesToSubfolder)"
                 AutoGenerateDependencies="$(NuBuildAutoGenerateDependencies)"
                 LimitMajorVersionOfDependencies="$(NuBuildLimitMajorVersionOfDependencies)"
                 AddExecutablesToLibFolder="$(NuBuildAddExecutablesToLibFolder)"
                 IncludePdbs="$(NuBuildIncludePdbs)"/>
      <Message Text="%(NuPrepared.Filename) -> %(NuPrepared.NuPackagePath)" Importance="high"/>
      <CallTarget Targets="__CopySourceItemsToOutputDirectory"/>
   </Target>
   <Target Name="PostBuildEvent"
           Condition="'$(PostBuildEvent)' != '' and '$(RunPostBuildEvent)' != 'OnOutputUpdated'" >
      <Exec WorkingDirectory="$(OutDir)" Command="$(PostBuildEvent)" />
   </Target>
   <!-- Target: Rebuild 
      . runs a clean and then a build
   -->
   <Target Name="Rebuild" DependsOnTargets="Clean;Build;">
   </Target>
   <!-- Target: CopySourceItemsToOutputDirectory 
      . copies additional files to output directory
   -->
   <Target Name="__CopySourceItemsToOutputDirectory"
           DependsOnTargets="__GetCopyToOutputDirectoryItems;__CopyOutOfDateSourceItemsToOutputDirectory;__CopyOutOfDateSourceItemsToOutputDirectoryAlways"/>
   <Target Name="__CopyOutOfDateSourceItemsToOutputDirectory"
           Condition=" '@(_SourceItemsToCopyToOutputDirectory)' != '' "
           Inputs="@(_SourceItemsToCopyToOutputDirectory)"
           Outputs="@(_SourceItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')">
      <Copy SourceFiles = "@(_SourceItemsToCopyToOutputDirectory)"
            DestinationFiles = "@(_SourceItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')"
            OverwriteReadOnlyFiles="true"/>
   </Target>
   <Target Name="__CopyOutOfDateSourceItemsToOutputDirectoryAlways"
           Condition=" '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' ">
      <Copy SourceFiles = "@(_SourceItemsToCopyToOutputDirectoryAlways)"
            DestinationFiles = "@(_SourceItemsToCopyToOutputDirectoryAlways->'$(OutDir)%(TargetPath)')"
            OverwriteReadOnlyFiles="true"/>
   </Target>
   <!-- Dummy targets required for Visual Studio -->
   <Target Name="GetFrameworkPaths"/>
   <Target Name="ResolveAssemblyReferences"/>
   <!-- User Targets -->
   <Target Name="BeforeClean"/>
   <Target Name="AfterClean"/>
   <Target Name="BeforeBuild"/>
   <Target Name="AfterBuild"/>
</Project>
